@inherits Custom.Hybrid.Razor14
@using ToSic.Razor.Blade;
@* --- This is the Bootstrap5 Edition of the File --- *@
@{
  // 1. Get parameters and ensure we have all we need (File or FileEntity) - otherwise warn the developer
  // * 'File' is an ADAM file which _has_ information (as .Metadata)
  // * 'FileEntity' is a dynamic entity which _is_ the information, containing a link (url) to the file
  var maybeFile = DynamicModel.File as ToSic.Sxc.Adam.IFile;
  var maybeEntity = DynamicModel.FileEntity;
  if (maybeFile == null && maybeEntity == null) {
    throw new Exception("FileList: No File or FileEntity passed to this razor partial. Please check your code.");
  }

  // Figure out mode: this template either got
  var isFileWithMetadata = maybeFile != null;

  // The file info/metadata from FileInfo parameter or as Metadata from the File
  var fileInfo = maybeEntity ?? maybeFile.Metadata;

  // Get the File from the parameter or create it from the fileInfo (in the URL field)
  // It can still be null, if the url is a link to a page
  var realFile = maybeFile ?? Kit.Adam.File(fileInfo.Field("Url"));

  // Special helper to figure out properties of the link/file - note that the Url can point to a file, but it can also be a link to a page
  var linkHelper = CreateInstance("LinkHelper.cs");
  var url = isFileWithMetadata ? realFile.Url : fileInfo.Url;
  var linkInfo = linkHelper.LinkInfos(url, "", fileInfo.Icon);

  // When in demo mode, files are not editable; If not set, assume false
  var rootIsDemo = DynamicModel.RootIsDemo ?? false;

  // The toolbar must edit either for metadata or the file-entity
  var toolbar = isFileWithMetadata
    // For Metadata - do edit-only - unless we're showing demo, then only add info-button
    ? (rootIsDemo
      ? Kit.Toolbar.Empty().Info(tweak: b => b.Note(Resources.Toolbar.IsDemoSubItem)) // Demo: Show info-text only
      : Kit.Toolbar.Empty().Metadata(realFile.Metadata, "File"))        // Metadata: Show edit for metadata type "File"
    // For file-list, provide most buttons to also allow add/sort etc.
    : Kit.Toolbar.Default(fileInfo).Layout("-");

  // If skin is Bootstrap5 then use "ps-2", BS4/others "pl-2"
  var paddingCssClass = Kit.Css.Is("bs5") ? "ps-2" : "pl-2";
}

<a href="@url" class="list-group-item list-group-item-action @paddingCssClass" aria-current="true" target="_blank" @toolbar>
  @* Show the Icon*@
  <i class="co-icon fas @linkInfo.Icon" aria-hidden="true"></i>

  @* Title *@
  @Text.First(fileInfo.EntityTitle, fileInfo.Name, (realFile != null ? realFile.Name : ""))

  @* Show size if possible *@
  @if (realFile != null) {
    if (realFile.SizeInfo.BestSize > 0) {
      <text>(@realFile.SizeInfo.BestSize.ToString("#.##") @realFile.SizeInfo.BestUnit)</text>
    } else {
      <text>(0 KB)</text>
    }
  }

  @* Show Description if it has any *@
  @if (Text.Has(fileInfo.description)) {
    <span class="description-wrapper">
      @Html.Raw(fileInfo.description)
    </span>
  }
</a>